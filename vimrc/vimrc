" 变量定义 {{{1
let b:WOLFWZR_colorscheme_applied = 0

" 设置Tab栏（WOLFWZR_set_tabline_style） {{{1
function WOLFWZR_set_tabline_style()
    if ! has("gui_running") && $ITERM_PROFILE == "Dark"
        hi TabLine cterm=none ctermbg=black 
        hi TabLineSel cterm=bold ctermbg=blue ctermfg=white
        hi TabLineFill cterm=none ctermbg=black 
    endif
endfunction

" 代码通用设置(WOLFWZR_code_common_setting) {{{1
function WOLFWZR_code_common_setting()
    syntax on
    set cindent 
    set tabstop=4 
    set shiftwidth=4 
    set expandtab 
    set nu
    if has("gui_running")
        set columns=87
        set lines=37
        set cursorline
        "set colorcolumn=80
    endif
endfunction

" 设置配色方案(WOLFWZR_set_colorscheme) {{{1
" 设置配色方案并重新加载mark.vim（否则mark.vim将失效）
" 使用autocmd ColorScheme事件来执行mark.vim并不起作用(why?)
function WOLFWZR_set_colorscheme(color)
    exec 'colorscheme ' . a:color
    source ~/.vim/bundle/Mark/plugin/mark.vim
    let b:WOLFWZR_colorscheme_applied = 1
endfunction

" filetype处理 {{{1
function WOLFWZR_filetype_setting()
    " C/CPP/H/NASL/LEX/YACC/BISON {{{2
    if &filetype == "c" 
       \ || &filetype == "h"
       \ || &filetype == "cpp"
       \ || &filetype == "nasl"
       \ || &filetype == "lex"
       \ || &filetype == "yacc"
       \ || &filetype == "bison"
        call WOLFWZR_code_common_setting()

        " 用缩写(abbreivations)自定义代码块的补全
        " source ~/usr/etc/abbreviations.vim
        " Tag跳转

        if has("gui_running")
            " 备选配色方案：
            " codeschool
            " carvedwood
            " chance-of-storm
            " corn
            " corporation
            " dante
            " darkz
            " darkburn
            " freya
            " gruvbox （有个奇怪的事情：
            "           要使这个主题生效，得先设置主题为greyblue）
            call WOLFWZR_set_colorscheme("greyblue")
            call WOLFWZR_set_colorscheme("gruvbox")
            hi cFunctions guifg=DarkYellow cterm=bold ctermfg=DarkBlue

            " set colorcolumn=80
            
            winpos 200 20
            set lines=38
        endif
    " ASM {{{2
    elseif &filetype == "asm"
        call WOLFWZR_code_common_setting()
        if has("gui_running")
            " rainbow_neon
            " selenitic
            " settlemyer
            " sonofobsidian
            " spectro
            " tchaba
            " wolfasm ( only avirable in rmbp )
            call WOLFWZR_set_colorscheme("rainbow_neon")
            highlight CursorLine guibg=grey25
        endif
    " PYTHON {{{2
    elseif &filetype == "python"
        call WOLFWZR_code_common_setting()
    " JAVA {{{2
    elseif &filetype == "java"
        call WOLFWZR_code_common_setting()
    " SH {{{2
    elseif &filetype == "sh"
        call WOLFWZR_code_common_setting()

        " 设置配色方案及其对应的YouCompleteMe弹出菜单样式
        call WOLFWZR_set_colorscheme("anotherdark")
        " 可以使用:hi命令查看所有高亮配色对，基于某个改改
        highlight Pmenu guibg=grey25
        highlight PmenuSel guibg=grey40

        if has("gui_running")
            set colorcolumn=0
            set columns=90
        endif
    " VIM {{{2
    elseif &filetype == "vim"
        call WOLFWZR_code_common_setting()
	    set foldmethod=marker

        if has("gui_running")
            call WOLFWZR_set_colorscheme("Tomorrow-Night-Eighties")
            highlight Folded gui=none guibg=#515151 guifg=#99CC99
            highlight CursorLine guibg=grey23
            highlight PmenuSel gui=none guibg=grey50
        endif
    " MKD {{{2
    elseif &filetype == "mkd"
        call WOLFWZR_code_common_setting()
        if has("gui_running")
            call WOLFWZR_set_colorscheme("darktango")
            highlight Pmenu     guibg=#555753 guifg=#EEEEEE
            highlight PmenuSel  guibg=#BABDB6
            set guifont=Monaco:h16,YaHei\ Consolas\ Hybrid\ 14
            " Aviable guifontwide
            " Hannotate\ SC\ Regular
            " Libian\ SC\ Regular
            " Yuanti\ SC\ Regular
            " Xingkai\ SC\ Light
            set guifontwide=Kaiti\ SC\ Regular,YaHei\ Consolas\ Hybrid
        endif
    " TEXT {{{2
    elseif &filetype == "text"
        if has("gui_running")
            call WOLFWZR_set_colorscheme("Tomorrow-Night-Eighties")
            highlight Pmenu     guibg=#555753 guifg=#EEEEEE
            highlight PmenuSel  guibg=#BABDB6
            set guifont=Monaco:h18,YaHei\ Consolas\ Hybrid\ 16
            " Aviable guifontwide
            " Hannotate\ SC\ Regular
            " Libian\ SC\ Regular
            " Yuanti\ SC\ Regular
            " Xingkai\ SC\ Light
            set guifontwide=Kaiti\ SC\ Regular,YaHei\ Consolas\ Hybrid
        endif
    endif
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 设置开始
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 设置不与vi兼容 {{{1
set nocp

" mapleader设置 {{{1
let mapleader="s"

" 设置退格键可删除的内容
set backspace=indent,eol,start

" Vundle及其插件设置 {{{1
" Vundle是一个管理插件的插件
" 这里配置文件里面包含了各个插件的配置
source ~/.vim/bundle/Vundle.vim/Vundle.vimrc

" 基础设置 {{{1

" 设置搜索结果高亮显示 {{{2
set hlsearch

" 设置搜索结果实时显示 {{{2
set incsearch

" 设置水平新建窗口时新窗口在下边 {{{2
"set splitbelow

" 设置垂直新建窗口时新窗口在右边 {{{2
" set splitright

" 文件编码设置 {{{2
" set encoding=utf-8 
" set fileencodings=ucs-bom,utf-8,default,latin1

" 打开文件时光标跳转到上次文件关闭时的位置 {{{2
if has("autocmd")
    autocmd BufReadPost * 
      \ if line("'\"") > 0 && line("'\"") <= line("$") | 
      \ exe "normal g`\"" | 
      \ endif 
endif

" 状态栏设置 {{{2
set laststatus=2
hi StatusLine cterm=bold gui=bold
set statusline=
    \%f\ %r\ %m\ %q
    \%=
    \[%{&fileformat},%{&fileencoding}%Y]
    \\ (%l/%L,%03v)\ %03P

" 快捷键设置 {{{1
" 设置代码折叠快捷键 {{{2
nnoremap <Leader><SPACE> @=((foldclosed(line('.'))<0)?'zc':'zo')<CR>

" 翻页设置 {{{2
nnoremap <SPACE> <C-f>
nnoremap <TAB> <C-b>


" Tab跳转 {{{2
nnoremap <Leader>j :tabnext<CR>
nnoremap <Leader>k :tabprev<CR>
nnoremap <Leader>J :tablast<CR>
nnoremap <Leader>K :tabfirst<CR>

" Window跳转和前进/后退 {{{2
if has("gui_running")
    if has("macunix")
        source ~/.vim/mac-alt-map.vimrc
    elseif has("unix")
        nnoremap <A-j> <C-w>j
        nnoremap <A-k> <C-w>k
        nnoremap <A-h> <C-w>h
        nnoremap <A-l> <C-w>l

        " Decrease Window Height
        nnoremap <A-J> <C-w>3-
        " Increase Window Height
        nnoremap <A-K> <C-w>3+
        " Decrease Windows Width
        nnoremap <A-H> <C-w>3<
        " Increase Windows Width
        nnoremap <A-L> <C-w>3>

        nnoremap <A-i> <C-i>
        nnoremap <A-o> <C-o>
    endif
endif

" 按F1查看当前光标下单词的帮助信息 {{{2
nnoremap <Leader>h :help <C-R>=expand("<cword>")<CR><CR>
nnoremap <F1> :help <C-R>=expand("<cword>")<CR><CR>

" 快捷预览当前光标下的ColorScheme
noremap <Leader>s :color <C-r>=expand("<cWORD>")<CR><CR>

" 查询当前光标下单词的意思 {{{2
if has("macunix")
    " 复制当前光标下的单词到系统粘贴板
    " normal F lvf "+y
    " 调用系统的词典应用来查询单词
    nnoremap <C-\> :!open -a directory <C-R>=expand("<cword>")<CR><CR>
elseif has("unix")
    nnoremap <C-\> :!sdcv "<cword>" <C-R>=expand("<cword>")<CR><CR>
endif

" 文件类型相关设置 {{{1
if has("autocmd") 
    " 指定某些后缀的文件类型
    autocmd BufRead,BufNewFile *.{nasl,inc} set filetype=nasl
    autocmd BufRead,BufNewFile *.wsgi set filetype=python
    autocmd BufRead,BufNewFile *.bashrc set filetype=sh
    autocmd BufRead,BufNewFile *.vimrc set filetype=vim
    autocmd BufRead,BufNewFile *.{md,mkd,markdown} set filetype=mkd

    " 根据不同的文件类型做不同的设置
    autocmd VimEnter * call WOLFWZR_filetype_setting()
    nnoremap <Leader>w :call WOLFWZR_filetype_setting()<CR>

    " 根据不同的文件类型设置按键映射
    autocmd FileType c,cpp,h,flex,bison,yacc 
        \ nnoremap <buffer> <CR> :cs find g <C-R>=expand("<cword>")<CR><CR>|
        \ nnoremap <buffer> <BS> <C-t>
    autocmd FileType help 
        \ nnoremap <buffer> <CR> <C-]>| 
        \ nnoremap <buffer> <BS> <C-t>|
        \ nnoremap <buffer> q :q<CR>
    autocmd FileType vim
        \ nnoremap <buffer> <CR> gf|
        \ nnoremap <buffer> <BS> <C-o>
    autocmd FileType mkd
        \ nnoremap <buffer> <F5> :!mkd_preview.sh %<CR>
endif

" GUI设置 {{{1
if has("gui_running")
    " 去掉菜单栏、工具栏等
    set go=
    " 设置窗口位置
    winpos 200 30
    " 设置窗口行数和列数
    set columns=90
    set lines=35
    " 设置显示字体
    set guifont=YaHei\ Consolas\ Hybrid\ 14,Monaco:h16
    " 设置默认配色方案
    if b:WOLFWZR_colorscheme_applied == 0
        " 备用配色方案
        " PapayaWhip
        " Monokai
        " peaksea
        " pf_earth
        " phd
        " railscasts
        " rainbow_neon
        " rdark
        " settlemyer
        " sorcerer
        " southwest-fog
        " strawimodo
        " symfony
        " tango-desert
        " tango2
        " tchaba
        " Tomorrow-Night-Eighties
        " two2tango
        " vilight
        " vydark
        " watermark
        " wombat
        call WOLFWZR_set_colorscheme("Tomorrow-Night-Eighties")
    endif
    " 设置光标行高亮
    " highlight CursorLine gui=reverse
    " set cursorline
    " 设置光标
    " :help 'guicursor'
    set guicursor=n-v-c:block-Cursor/lCursor
    set guicursor+=ve:ver35-Cursor
    set guicursor+=o:hor50-Cursor
    set guicursor+=i-ci:ver25-Cursor/lCursor
    set guicursor+=r-cr:hor20-Cursor/lCursor
    set guicursor+=sm:block-Cursor
    set guicursor+=a:blinkon0
else
    if b:WOLFWZR_colorscheme_applied == 0
        call WOLFWZR_set_colorscheme("delek")
    endif
endif

" cscope设置 {{{1
if has("cscope")
    set csprg=/usr/bin/cscope
    set csto=0
    set cst
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out") 
        cs add ./cscope.out
    " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set csverb
    nnoremap <Leader>fs :cs find s <C-R>=expand("<cword>")<CR><CR>
    nnoremap <Leader>fg :cs find g <C-R>=expand("<cword>")<CR><CR>
    nnoremap <Leader>fc :cs find c <C-R>=expand("<cword>")<CR><CR>
    nnoremap <Leader>ft :cs find t <C-R>=expand("<cword>")<CR><CR>
    nnoremap <Leader>fe :cs find e <C-R>=expand("<cword>")<CR><CR>
    nnoremap <Leader>ff :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nnoremap <Leader>fi :cs find i <C-R>=expand("<cfile>")<CR><CR>
    nnoremap <Leader>fd :cs find d <C-R>=expand("<cword>")<CR><CR>
    command -nargs=1 Css cs find s <args>
    command -nargs=1 Csg cs find g <args>
    command -nargs=1 Csc cs find c <args>
    command -nargs=1 Cst cs find t <args>
    command -nargs=1 Cse cs find e <args>
    command -nargs=1 Csf cs find f <args>
    command -nargs=1 Csi cs find i <args>
    command -nargs=1 Csd cs find d <args>
endif
