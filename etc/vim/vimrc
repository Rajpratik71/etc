" vim config quick references:
"
" ~wolfwzr/.vim/vimrc
" ~wolfwzr/.vim/vundle.vimrc
" ~wolfwzr/.vim/mac-alt-map.vimrc

" 变量定义 {{{1
let s:WOLFWZR_colorscheme_applied = 0
let s:WOLFWZR_backgroud = "light"
let s:WOLFWZR_cpu_info = system("grep -m 1 -o Atom /proc/cpuinfo | tr -d '\r\n'")
" }}}1

" 函数定义 {{{1

" WOLFWZR_code_common_setting: 代码通用设置 {{{2
function WOLFWZR_code_common_setting()
    syntax on
    set cindent 
    set tabstop=4 
    set shiftwidth=4 
    set expandtab 
    set nofoldenable

    "set cursorline
    "set colorcolumn=80
    "highlight WarningCols gui=undercurl
    "match WarningCols /.\%>80v/

    " 按<Leader><Leader>执行make并打开quickfix窗口
    " 然后跳到第一个错误处(如果有错误的话)
    nnoremap <Leader><SPACE> :make<CR><CR>:cw<CR>:cc<CR>
endfunction
"}}}2

" WOLFWZR_set_guifont: 设置GUI字体{{{2
function WOLFWZR_set_guifont()
    if !has("gui_running")
        return
    endif

    if has("macunix")
        "set guifont=Monaco\ for\ Powerline:h16,Monaco:h16
        set guifont=Monaco:h16
        " 单独设置中文字体
        " 备用字体
        " Hannotate\ SC\ Regular
        " Libian\ SC\ Regular
        " Yuanti\ SC\ Regular
        " Xingkai\ SC\ Light
        set guifontwide=Kaiti\ SC\ Regular
    else
        if s:WOLFWZR_cpu_info == "Atom"
            "set guifont=YaHei\ Consolas\ Hybrid\ 12
            set guifont=Source\ Code\ Pro\ 12
        else
            "YaHei Consolas Hybrid字体不知为何会使状态栏占用命令栏
            "set guifont=YaHei\ Consolas\ Hybrid\ 14
            set guifont=Source\ Code\ Pro\ 14
        endif
    endif
endfunction
"}}}2

" WOLFWZR_color_modify: 颜色加减运算 {{{2
function WOLFWZR_color_modify(color, oper, modify_value)
    if a:color == ""
        " 返回红色以做告警
        return '#FF0000'
    endif

    if a:oper == 'add'
        let l:col_r = '0x' . strpart(a:color, 1, 2) + a:modify_value
        let l:col_g = '0x' . strpart(a:color, 3, 2) + a:modify_value
        let l:col_b = '0x' . strpart(a:color, 5, 2) + a:modify_value
    elseif a:oper == 'sub'
        let l:col_r = '0x' . strpart(a:color, 1, 2) - a:modify_value
        let l:col_g = '0x' . strpart(a:color, 3, 2) - a:modify_value
        let l:col_b = '0x' . strpart(a:color, 5, 2) - a:modify_value
    else
        echom "WOLFWZR_color_modify: invalid oper"
        return a:color
    endif
    
    if l:col_r > 0xff | let l:col_r = 0xff | endif
    if l:col_g > 0xff | let l:col_g = 0xff | endif
    if l:col_b > 0xff | let l:col_b = 0xff | endif

    if l:col_r < 0 | let l:col_r = 0 | endif
    if l:col_g < 0 | let l:col_g = 0 | endif
    if l:col_b < 0 | let l:col_b = 0 | endif

    return '#' . printf("%02x", l:col_r)
             \ . printf("%02x", l:col_g)
             \ . printf("%02x", l:col_b)      
endfunction
"}}}2

" WOLFWZR_set_colorscheme: 设置配色方案 {{{2
function WOLFWZR_set_colorscheme(color)

    let l:WOLFWZR_color_scheme = a:color

    " 为配合macosx夜间颜色反转，增加light主题{{{
    if has("macunix")
        let l:cur_hour = system("date +%H")

        if l:cur_hour >= 22 || l:cur_hour <= 8
            " 深夜OSX反转颜色，所有选用亮色背景，反转变成暗背景
            let s:WOLFWZR_backgroud = "light"
        else
            let s:WOLFWZR_backgroud = "dark"
        endif
        let s:WOLFWZR_backgroud = "dark"

        if s:WOLFWZR_backgroud == "light"
            " biogoo
            " bmichaelsen
            " cleanphp
            " colorful
            " colorzone
            " d8g_02
            " nedit
            " nedit2
            " pspad
            " smp
            " soso
            " [*****] neutron 
            " [*****] newspaper
            " [*****] oceanlight
            " [*****] peaksea
            " [*****] pyte
            " [*****] Tomorrow
            let l:WOLFWZR_color_scheme = "peaksea"
        endif
    endif
    "}}}

    " 设置配色方案及调整 {{{3
    " 备选配色方案："{{{
    " Monokai
    " PapayaWhip
    " Tomorrow-Night-Eighties
    " anotherdark
    " bubblegum
    " carvedwood
    " chance-of-storm
    " codeschool
    " corn
    " corporation
    " dante
    " darkburn
    " darkz
    " dusk
    " evening_2
    " freya
    " hybrid
    " lilypink
    " lucius
    " metacosm
    " mint
    " mrpink
    " neon
    " peaksea
    " pf_earth
    " phd
    " railscasts
    " rainbow_neon
    " rdark
    " selenitic
    " settlemyer
    " sonofobsidian
    " sorcerer
    " southwest-fog
    " spectro
    " strawimodo
    " symfony
    " tango-desert
    " tango2
    " tchaba
    " two2tango 
    " vilight
    " void
    " vydark
    " watermark
    " wolfasm (only aviliable in rmbp)
    " wombat
    " zenburn
    " kellys
    " mrpink
    " kib_darktango
    " kolor
    " lilypink
    " liquidcarbon
    " lucius
    " manuscript
    " native
    " nazca
    " southwest-fog
    "}}}
    execute 'colorscheme ' . l:WOLFWZR_color_scheme
    let s:WOLFWZR_colorscheme_applied = 1

    if &background != 'dark'
        " 以下调整均针对 dark 类主题
        " light 类主题很少用，所以不进行调整
        return
    endif

    " 调整{{{
    if l:WOLFWZR_color_scheme == "codeschool"
        hi Normal guibg=#2d2d2d guifg=#cccccc
        hi Folded guibg=#353500 guifg=Grey65
    elseif l:WOLFWZR_color_scheme == "gruvbox"
        hi cFunctions guifg=#ffcc88 cterm=bold ctermfg=DarkBlue
    elseif l:WOLFWZR_color_scheme == "neon"
        hi Folded guibg=#003040 guifg=Grey
    endif

    " CursorLineNr
    let l:tmp_color = synIDattr(hlID("Normal"), "bg", "gui")
    if l:tmp_color != ""
        execute 'hi CursorLineNr gui=NONE guibg=' . l:tmp_color
    endif
    execute 'hi CursorLineNr guifg=' . WOLFWZR_color_modify
                \ (synIDattr(hlID("Identifier"), "fg#", "gui"), 'add', 0x40)

    " LineNr
    execute 'hi LineNr guibg=' . WOLFWZR_color_modify
                \ (synIDattr(hlID("Normal"), "bg#", "gui"), 'add', 0x3)
    execute 'hi LineNr guifg=' . WOLFWZR_color_modify
                \ (synIDattr(hlID("CursorLineNr"), "fg#", "gui"), 'sub', 0x60)

    " Folded
    execute 'hi Folded guibg=' . WOLFWZR_color_modify
                \ (synIDattr(hlID("Normal"), "bg#", "gui"), 'add', 0x20)

    " Pmenu/PmenuSel
    "hi! link Pmenu LineNr
    "hi! link PmenuSel Cursor
    execute 'hi Pmenu gui=NONE guibg=' . WOLFWZR_color_modify
            \ (synIDattr(hlID("Normal"), "bg#", "gui"), "add", 0x10)
            \ . ' guifg=' . WOLFWZR_color_modify
            \ (synIDattr(hlID("Normal"), "fg#", "gui"), 'sub', 0x25)
    execute 'hi PmenuSel guibg=' . WOLFWZR_color_modify
            \ (synIDattr(hlID("Normal"), "bg#", "gui"), 'add', 0x25)
            \ . ' guifg=' . WOLFWZR_color_modify
            \ (synIDattr(hlID("Normal"), "fg#", "gui"), 'add', 0x30)
    
    " Visual
    hi Visual NONE
    execute 'hi Visual cterm=reverse term=reverse'
            \. ' guibg=' . WOLFWZR_color_modify
            \ (synIDattr(hlID("Normal"), "bg#", "gui"), 'add', 0x25)

    " TabLine/TabLineSel/TabLineFill
    execute 'hi TabLineSel gui=bold'
            \ 'guibg=' . synIDattr(hlID("Normal"), "bg", "gui")
            \ 'guifg=' . synIDattr(hlID("Normal"), "fg", "gui")
    execute 'hi TabLine gui=NONE guibg=' . WOLFWZR_color_modify
            \ (synIDattr(hlID("Normal"), "bg#", "gui"), 'add', 0x27)
    let l:tmp_color = WOLFWZR_color_modify
            \ (synIDattr(hlID("Normal"), "bg#", "gui"), 'add', 0x17)
    execute 'hi TabLineFill guibg=' . l:tmp_color . ' guifg=' . l:tmp_color
   
    hi Search NONE
    hi Search term=reverse cterm=reverse gui=reverse,underline

    hi Cursor NONE
    hi Cursor term=reverse cterm=reverse gui=reverse
    " }}}3

    " 重新加载mark.vim（否则mark.vim将失效） {{{3
    " 下面的autocmd命令无预期效果, why?
    " autocmd ColorScheme * source  ~wolfwzr/.vim/bundle/Mark/plugin/mark.vim
    source ~wolfwzr/.vim/bundle/Mark/plugin/mark.vim
    " }}}3
    
endfunction
" }}}2

" WOLFWZR_filetype_setting: FileType处理 {{{2
function WOLFWZR_filetype_setting()
    " C/CPP/H/NASL/LEX/YACC/BISON/JAVA {{{3
    if &filetype == "c" 
       \ || &filetype == "h"
       \ || &filetype == "cpp"
       \ || &filetype == "nasl"
       \ || &filetype == "lex"
       \ || &filetype == "yacc"
       \ || &filetype == "bison"
       \ || &filetype == "java"
        " 因为在cscope中跳转回来时打开的折叠又变为折叠，所以默认关闭折叠
        set foldmethod=syntax
        call WOLFWZR_code_common_setting()

        " 用缩写(abbreivations)自定义代码块的补全
        " source ~/usr/etc/abbreviations.vim

        " gruvbox (要使这个主题生效，得先设置主题为greyblue)
        call WOLFWZR_set_colorscheme("greyblue")
        call WOLFWZR_set_colorscheme("gruvbox")
    " ASM {{{3
    elseif &filetype == "asm"
        set foldmethod=marker
        set commentstring=;%s
        call WOLFWZR_code_common_setting()

        call WOLFWZR_set_colorscheme("rainbow_neon")
        set syntax=nasm
    " PYTHON {{{3
    elseif &filetype == "python"
        set foldmethod=indent
        call WOLFWZR_code_common_setting()
    " SH {{{3
    elseif &filetype == "sh"
        set foldmethod=indent
        call WOLFWZR_code_common_setting()
        call WOLFWZR_set_colorscheme("neon")
    " VIM {{{3
    elseif &filetype == "vim"
        set foldmethod=marker
        call WOLFWZR_code_common_setting()
        call WOLFWZR_set_colorscheme("codeschool")
    " MKD {{{3
    elseif &filetype == "mkd"
        call WOLFWZR_code_common_setting()
        set nocindent
        set autoindent
        set foldenable
        call WOLFWZR_set_colorscheme("darktango")
    " HTML/XML/CSS/JS/XSL/XSLT {{{3
    elseif &filetype == "html"
        \ || &filetype == "xml"
        \ || &filetype == "css"
        \ || &filetype == "js"
        \ || &filetype == "xsl"
        \ || &filetype == "xslt"
        call WOLFWZR_code_common_setting()
        set nocindent
        set autoindent
    endif
    " }}}3
endfunction
" }}}2

" WOLFWZR_winpos_adjust: 调整GVIM窗口坐标 {{{2
function WOLFWZR_winpos_adjust(x_inc, y_inc)
    let l:winpos_x = getwinposx() + a:x_inc
    let l:winpos_y = getwinposy() + a:y_inc
    execute 'winpos '.l:winpos_x.' '.l:winpos_y
endfunction
" }}}2

" WOLFWZR_dictionary_qurey: 单词字典查询 {{{2
function WOLFWZR_dictionary_qurey(word)
    if a:word == ""
        return
    endif

    let l:tmp_file_prefix = "/tmp/vim_dict_"

    " 备份寄存器a
    let l:bakup_reg_a = @a

    if has("unix")
        " sdcv -n: 非交互模式
        let @a = system('sdcv -n --utf8-input --utf8-output '.a:word)
    else
        let @a = l:bakup_reg_a
        return
    endif

    let l:nr = bufwinnr(l:tmp_file_prefix . "*")
    if l:nr != -1
        execute nr . "wincmd w"
        normal ggVGd
    else
        " mktemp -u 只会生成文件名，不会创建文件
        execute "split" . system("mktemp -u ". l:tmp_file_prefix . "XXXXXXX")
    endif
    normal "ap

    nnoremap <buffer> q :q!<CR>
    nnoremap <buffer> <CR> 
        \ :call WOLFWZR_dictionary_qurey('<C-r>=expand("<cword>")<CR>')<CR>
    nnoremap <buffer> o
        \ :call WOLFWZR_dictionary_qurey('<C-r>=expand("<cword>")<CR>')<CR>
    " 恢复寄存器a
    let @a = l:bakup_reg_a
endfunction
" }}}2

" WOLFWZR_grep: grep {{{2
function WOLFWZR_grep(word)
    call setqflist([])
    silent execute "g/" . a:word . "/if &buftype == '' | call setqflist([{'type': 'l', 'col':1, 'bufnr': winbufnr('.'), 'lnum': line('.'), 'text':getline('.')}], 'a') | endif"
    botright cw
endfunction
" }}}2

" WOLFWZR_cscope_update_db: update cscope database {{{2
function WOLFWZR_cscope_update_db()
    call system('cscope -Rbq')
    cs reset
endfunction
" }}}2

" WOLFWZR_cscope_load_db: find and load cscope database {{{2
function WOLFWZR_cscope_load_db()
    " kill all connections
    cs kill -1

    let l:cwd_bakup = getcwd()
    let l:tmp_dir = ''

    " search the first database from current directory up to '/'
    " load the database and change CWD to that directory
    while l:tmp_dir != '/'
        let l:tmp_dir = getcwd()
        if filereadable(l:tmp_dir . '/cscope.out')
            cs add ./cscope.out
            break
        endif
        " go to parrent directory
        execute 'cd ' . l:tmp_dir . '/..'
    endwhile

    if l:tmp_dir == '/'
        " go to origin directory if no database found
        execute 'cd ' . l:cwd_bakup
        if $CSCOPE_DB != ""
            " add database pointed to by environment
            cs add $CSCOPE_DB
        endif
    endif
endfunction
" }}}2

"临时在vim中预览字体效果 {{{2
"用法，先创建一个快捷键Ctrl+Enter来执行当前行命令
" nmap <C-Enter> j$v^<S-Enter>:<S-Enter><CR>
" 再查找出当前系统字体，linux下可运行如下命令：
" fc-list  | awk -F ':' '{print $2}' | sed 's/,/\n/g' | sort | uniq| sed 's/^ *//g;s/ *$/\ 14/g;s/ /\\ /g;s/^/set guifont=/g' > /tmp/pwall
" 我是通过man -k font,在里面找到fc-list命令的。
function WOLFWZR_FONT_REVIEW_TEST()
    nmap <C-Enter> j$v^<S-Enter>:<S-Enter><CR>

    " 比较好的字体
    set guifont=YaHei\ Consolas\ Hybrid\ 14
    set guifont=Courier\ 10\ Pitch\ 14
    set guifont=Inconsolata\-dz\ for\ Powerline\ 14
    set guifont=Source\ Code\ Pro\ 14
    set guifont=SimSun\ 16
    
    " 一般的字体
    set guifont=Anonymice\ Powerline\ 15
    set guifont=Anonymous\ Pro\ for\ Powerline\ 15
    set guifont=Inconsolata\ for\ Powerline\ 16
    set guifont=Meslo\ LG\ L\ DZ\ for\ Powerline\ 13
    set guifont=Meslo\ LG\ L\ for\ Powerline\ 13
    set guifont=Meslo\ LG\ M\ DZ\ for\ Powerline\ 13
    set guifont=Meslo\ LG\ M\ for\ Powerline\ 13
    set guifont=Meslo\ LG\ S\ DZ\ for\ Powerline\ 13
    set guifont=Meslo\ LG\ S\ for\ Powerline\ 13
    set guifont=YaHei\ Consolas\ Hybrid\ for\ Powerline\ 14
    set guifont=Adobe\ Courier\ 14
    set guifont=B&H\ LucidaTypewriter\ 13
    set guifont=Bitstream\ Terminal\ 14
    set guifont=Courier\ 14
    set guifont=Droid\ Sans\ Mono\ 14
    set guifont=DejaVu\ Sans\ Mono\ 14
    set guifont=FreeMono\ 14
    set guifont=Liberation\ Mono\ 14
    set guifont=Luxi\ Mono\ 14
    set guifont=Misc\ Fixed\ 15
    set guifont=Sony\ Fixed\ 15
    set guifont=Source\ Code\ Pro\ Black\ 14
    set guifont=Source\ Code\ Pro\ ExtraLight\ 14
    set guifont=Source\ Code\ Pro\ Light\ 14
    set guifont=Source\ Code\ Pro\ Semibold\ 14
    set guifont=Ubuntu\ Mono\ 14
endfunction
"}}}2

" }}}1

" 基础设置 {{{1
" 设置显示相对行号，方便jk跳转 "{{{
set relativenumber
set number
"}}}
" runtimepath管理 "{{{
set runtimepath-=~wolfwzr/.vim
set runtimepath+=~wolfwzr/.vim
set runtimepath-=~wolfwzr/.vim/bundle/Vundle.vim
set runtimepath+=~wolfwzr/.vim/bundle/Vundle.vim
"}}}
" VI兼容性设置 {{{2
set nocp
" }}}2
" mapleader设置 {{{2
let mapleader='\'
" }}}2
" 搜索效果设置 {{{2
set hlsearch
set incsearch
" }}}2
" 设置新建窗口时新窗口的位置 {{{2
set splitbelow
set splitright
" }}}2
" 退格键设置(设置<BS>可删除的内容） {{{2
set backspace=indent,eol,start
" }}}2
" 文件编码设置 "{{{
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,default,latin1
"}}}
" 状态栏设置 {{{2
set laststatus=2   " Always show the statusline
" 使用powerline代替
hi StatusLine cterm=bold gui=bold
set statusline=
    \%f\ %r\ %m\ %q
    \%=
    \[%{&fileformat},%{&fileencoding}%Y]
    \\ (%l/%L,%03v)\ %03P
" }}}2
" 打开文件时恢复光标位置 {{{2
if has("autocmd")
    autocmd BufReadPost * 
      \ if line("'\"") > 0 && line("'\"") <= line("$") | 
      \ exe "normal g`\"" | 
      \ endif 
endif
" }}}2
" 杂项设置{{{2
set wrap
" 取消CursorLine
" 因为我喜欢CursorLine有淡淡的背景色，但这样会有两个问题：
"   1. 当前行被 mark.vim 加背景色的单词背景变全黑，非常难看
"   2. 影响VIM效率
" 因此取消了CursorLine
set nocursorline
" }}}2
" }}}1

" Vundle及插件设置入口 {{{1
" ~/.vim/bundle/Vundle.vim/Vundle.vimrc
" Vundle是一个管理插件的插件
" 这里配置文件里面包含了各个插件的配置
source ~wolfwzr/.vim/bundle/Vundle.vim/Vundle.vimrc
" }}}1

" 快捷键设置 {{{1

" 重设字体 (Bug?){{{
" 不知为何，当打开一些没有特殊处理的类型文件时
" （不在 WOLFWZR_filetype_setting 函数处理的类型）
" 偶尔会出现状态栏位于最底一行，把命令行给侵占了
" 通过debug发现重现设置字体能解决这问题。于是有了这个快捷键
" 但根本原因还是未找到，为何字体会造成这样的影响？
" !!!!!更新，最新观察，似乎是因为字体引起的，YaHei字体会出现这个问题
" 换成其它字体后到目前为止没再出现过,且Mac上一直没有出现过。
" nnoremap <Leader>1 :call WOLFWZR_set_guifont()<CR>
" }}}

" hardmode {{{2
" 用 <C-h> 代替 <BS>, <C-w> 还可以直接删除一个word
" 等熟练使用后可以将<BS>映射为删除整行 <ESC>^C
inoremap <BS> <NOP>
cnoremap <BS> <NOP>
" }}}2

" 翻页设置 {{{2
nnoremap <SPACE> <C-f>
nnoremap <TAB> <C-b>
" }}}2

" 快速查看QuickFix List的上一项/下一项 {{{2
if has("gui_running")
    nnoremap <F2> :botright cw<CR>
    nnoremap <F3> :cp<CR>
    nnoremap <F4> :cn<CR>
    " Tips:
    "   :colder 查看上一个quickfix窗口
    "   :cnewer 查看下一个quickfix窗口
endif
" }}}2

" Tab跳转 {{{2
nnoremap <Leader>j :tabnext<CR>
nnoremap <Leader>k :tabprev<CR>
" }}}2

" Window/GUI窗口相关{{{2
if has("gui_running") 
    " Window跳转 "{{{
    nnoremap <C-j> <C-w>j
    nnoremap <C-k> <C-w>k
    nnoremap <C-h> <C-w>h
    nnoremap <C-l> <C-w>l
    "}}}
        " Window大小调整 {{{
        " Decrease Window Height
        " nnoremap <C--> <C-w>3-
        " Increase Window Height
        " nnoremap <C-=> <C-w>3+
        " Decrease Windows Width
        " nnoremap <C-<> <C-w>3<
        " Increase Windows Width
        " nnoremap <C->> <C-w>3>
        " }}}
    
    if ! has("macunix")
        " 调整GVIM窗口位置 {{{
        nmap <A-j> :call WOLFWZR_winpos_adjust(0,10)<CR>
        nmap <A-k> :call WOLFWZR_winpos_adjust(0,-10)<CR>
        nmap <A-h> :call WOLFWZR_winpos_adjust(-20,0)<CR>
        nmap <A-l> :call WOLFWZR_winpos_adjust(20,0)<CR>
        " }}}
        " 调整GVIM窗口大小 {{{
        nmap <A-S-j> :set lines+=1<CR>
        nmap <A-S-k> :set lines-=1<CR>
        nmap <A-S-h> :set columns-=2<CR>
        nmap <A-S-l> :set columns+=2<CR>
        "}}}
    endif
endif
" }}}

" 复制/剪切/粘贴 {{{2
if has("gui_running")
    " 省事，Copy/Cut/Past 统一用 Shift+Enter 来完成
    nnoremap <S-Enter> "+p
    vnoremap <S-Enter> "+y
    inoremap <S-Enter> <C-r>+
    cnoremap <S-Enter> <C-r>+

    if ! has("maxunix")
        vnoremap <C-c> "+y
        vnoremap <C-x> "+x
        inoremap <C-v> <C-r>+
        cnoremap <C-v> <C-r>+
    endif
endif
" }}}2

" 代码折叠快捷键 {{{2
" zi : set foldenable!
" za : toggle fold
" zo : open fold
" zc : close fold
" nnoremap <Leader><SPACE> @=((foldclosed(line('.'))<0)?'zc':'zo')<CR>
" nnoremap <Leader><SPACE> za
" }}}2

" 查看当前光标下单词的帮助信息 {{{2

" VIM的帮助信息 {{{3
nnoremap <Leader>h :help <C-R>=expand("<cword>")<CR><CR>
nnoremap <Leader>H :help <C-R>=expand("<cWORD>")<CR><CR>

nnoremap <F1>   :help <C-R>=expand("<cword>")<CR><CR>
nnoremap <S-F1> :help <C-R>=expand("<cWORD>")<CR><CR>
" }}}3

" linux的man手册 {{{3
runtime ftplugin/man.vim
nnoremap K :Man <C-r>=expand("<cword>")<CR><CR>
" use <Leader>[0-9] ?
nnoremap <Leader>sm0 :Man 0 <C-r>=expand("<cword>")<CR><CR>
nnoremap <Leader>sm1 :Man 1 <C-r>=expand("<cword>")<CR><CR>
nnoremap <Leader>sm2 :Man 2 <C-r>=expand("<cword>")<CR><CR>
nnoremap <Leader>sm3 :Man 3 <C-r>=expand("<cword>")<CR><CR>
nnoremap <Leader>sm4 :Man 4 <C-r>=expand("<cword>")<CR><CR>
nnoremap <Leader>sm5 :Man 5 <C-r>=expand("<cword>")<CR><CR>
nnoremap <Leader>sm6 :Man 6 <C-r>=expand("<cword>")<CR><CR>
nnoremap <Leader>sm7 :Man 7 <C-r>=expand("<cword>")<CR><CR>
nnoremap <Leader>sm8 :Man 8 <C-r>=expand("<cword>")<CR><CR>
nnoremap <Leader>sm9 :Man 9 <C-r>=expand("<cword>")<CR><CR>
" }}}3

" 单词字典查询 {{{3
command -nargs=1 Sdcv call WOLFWZR_dictionary_qurey("<args>")
nnoremap <Leader>d :Sdcv '<C-R>=expand("<cword>")<CR>'<CR>
" }}}3

" Buffer Grep {{{3
" 在当前Buffer中Grep
command -nargs=1 Grep call WOLFWZR_grep("<args>")
nnoremap <Leader>g
    \ :call WOLFWZR_grep('<C-R>=expand("<cword>")<CR>')<CR>
" 在所有Buffer中Grep
nnoremap <Leader>G
    \ :Bgrep <C-R>=expand("<cword>")<CR><CR>
" }}}3

" }}}2

" 快速预览当前光标下的 ColorScheme {{{2
noremap <Leader>C :color <C-r>=expand("<cWORD>")<CR><CR>
" }}}2

" cmdline模式下的光标移动 {{{2
if has("gui_running")
    " Tips:
    "
    " C-d : Show available completion
    " C-f : go to command line window
    "
    " C-i : <Tab>
    " C-n : <Tab> else <Down>
    " C-p : <S-Tab> else <Up>
    "
    " C-h : backspace
    " C-u : Clear line
    "
    " C-b : cursor to Begin of command-line
    " C-e : cursor to End of command-line
    cnoremap <C-j> <Right>
    cnoremap <C-k> <Left>
    cnoremap <C-l> <Del>
endif
" }}}2

" MacVim alt键映射 {{{2
if has("gui_running") && has("macunix")
    " MacVim无法映射alt键(<A-,<M-)都不行
    " 但可以通过直接输入<A-x>(在键盘上按住alt再按x键，得到一个乱码字符）得到
    " 于是可以通过 nmap ê <C-w>j 来创建映射
    " 但直接写在本文件中无效，在新文件中有效,所以将Mac下的alt映射放在新文件中
    " 猜测可能是因为本文件包含中文的原因，新文件中若不包含中文就有效
    source ~wolfwzr/.vim/mac-alt-map.vimrc
endif
" }}}2

" Quick Edit/Source vimrc{{{
command EditRc   :tabnew ~wolfwzr/.vim/vimrc
command SourceRc :source ~wolfwzr/.vim/vimrc
"}}}

" }}}1

" 文件类型相关设置 {{{1
if has("autocmd") 
    " 指定某些后缀的文件类型
    autocmd BufRead,BufNewFile *.{nasl,inc} set filetype=nasl
    autocmd BufRead,BufNewFile *.wsgi set filetype=python
    autocmd BufRead,BufNewFile *.bashrc set filetype=sh
    autocmd BufRead,BufNewFile *.vimrc set filetype=vim
    autocmd BufRead,BufNewFile *.{md,mkd,markdown} set filetype=mkd

    " 根据不同的文件类型做不同的设置
    autocmd VimEnter * call WOLFWZR_filetype_setting()
    nnoremap <Leader>w :call WOLFWZR_filetype_setting()<CR>

    " CommandLine Windows <CR>可以被映射成其它用途了，所以使用'o'来执行命令
    autocmd CmdWinEnter : nnoremap <buffer> o <CR>

    " 根据不同的文件类型设置按键映射
    augroup filetype_autocmd
        autocmd FileType c,cpp,h,flex,bison,yacc 
            \ nnoremap <buffer> <CR> :cs find g <C-R>=expand("<cword>")<CR><CR>|
            \ nnoremap <buffer> <BS> <C-t>
        autocmd FileType help 
            \ nnoremap <buffer> <CR> <C-]>| 
            \ nnoremap <buffer> o    <C-]>| 
            \ nnoremap <buffer> <BS> <C-t>|
            \ nnoremap <buffer> q :q<CR>
        autocmd FileType vim
            \ nnoremap <buffer> <CR> gf|
            \ nnoremap <buffer> <BS> <C-o>
        autocmd FileType mkd
            \ nnoremap <buffer> <F5> :!mkd_preview.sh %<CR>|
            \ nnoremap <buffer> <C-t> :Toch<CR>|
            \ nnoremap <buffer> o    A<CR>|
            \ inoremap <A-d> <CR><ESC>k:r !date +\%F<CR>kJJi<SPACE>|
            \ iabbrev <buffer> cdb^ ```<CR>```<ESC>ka|
            \ iabbrev <buffer> cd^ ``<ESC>i
        autocmd FileType qf
            \ nnoremap <buffer> o <CR>|
            \ nnoremap <buffer> q :q<CR>
        autocmd FileType man
            \ nnoremap <buffer> q :q<CR>|
            \ nnoremap <buffer> o :Man <C-r>=expand("<cword>")<CR><CR>|
            \ nnoremap <buffer> <CR> :Man <C-r>=expand("<cword>")<CR><CR>
    augroup end
endif
" }}}1

" GUI设置 {{{1
if has("gui_running")
    " 去掉菜单栏、工具栏等
    set go=

    call WOLFWZR_set_guifont()

    " 设置窗口位置
    if s:WOLFWZR_cpu_info == "Atom"
        winpos 120 0
    else
        winpos 245 10
    endif
    set columns=85
    set lines=40

    " 设置默认配色方案
    if s:WOLFWZR_colorscheme_applied == 0
        call WOLFWZR_set_colorscheme("codeschool")
    endif

    " 光标设置 (:help 'guicursor')
    set guicursor=n-v-c:block-Cursor/lCursor
    set guicursor+=ve:ver35-Cursor
    set guicursor+=o:hor50-Cursor
    set guicursor+=i-ci:ver25-Cursor/lCursor
    set guicursor+=r-cr:hor20-Cursor/lCursor
    set guicursor+=sm:block-Cursor
    set guicursor+=a:blinkon0
endif
" }}}1

" cscope设置 {{{1
if has("cscope")
    set csprg=/usr/bin/cscope
    set csto=0
    set cst
	set cscopequickfix=s-,c-,d-,i-,t-,e-

    set nocsverb
    call WOLFWZR_cscope_load_db()
    set csverb

    nnoremap <Leader>fs :cs find s <C-R>=expand("<cword>")<CR><CR>
    nnoremap <Leader>fg :cs find g <C-R>=expand("<cword>")<CR><CR>
    nnoremap <Leader>fc :cs find c <C-R>=expand("<cword>")<CR><CR>
    nnoremap <Leader>ft :cs find t <C-R>=expand("<cword>")<CR><CR>
    nnoremap <Leader>fe :cs find e <C-R>=expand("<cword>")<CR><CR>
    nnoremap <Leader>ff :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nnoremap <Leader>fi :cs find i <C-R>=expand("<cfile>")<CR><CR>
    nnoremap <Leader>fd :cs find d <C-R>=expand("<cword>")<CR><CR>

    nnoremap <Leader>fu :call WOLFWZR_cscope_update_db()<CR>
    nnoremap <Leader>fl :call WOLFWZR_cscope_load_db()<CR>

    command -nargs=1 Css cs find s <args>
    command -nargs=1 Csg cs find g <args>
    command -nargs=1 Csc cs find c <args>
    command -nargs=1 Cst cs find t <args>
    command -nargs=1 Cse cs find e <args>
    command -nargs=1 Csf cs find f <args>
    command -nargs=1 Csi cs find i <args>
    command -nargs=1 Csd cs find d <args>

    command Csu call WOLFWZR_cscope_update_db()
    command Csl call WOLFWZR_cscope_load_db()
endif
" }}}1

" vim: set ft=vim:
