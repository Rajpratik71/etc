############################################################
# VARIABLES FOR THIS SCRIPT
############################################################
WOLFWZR_HOME=~wolfwzr
if [ "$(uname -s)" = "Darwin" ]
then
    OS_TYPE="osx"
else
    OS_TYPE="linux"
fi

if [ "$OS_TYPE" = "linux" ]
then
    grep "model name" /proc/cpuinfo | grep -s -q "Atom" && CPU_TYPE="Atom"
fi

############################################################
# BASH PREFERENCES
############################################################
set -o vi
export EDITOR=vim

# PATH
function append_to_path()
{
    local new_path=$1

    [ -z "$new_path" ] && return
    echo $PATH | grep -s -q ":${new_path}[:$]"
    [ $? -ne 0 ] && PATH="$PATH:$new_path"
    export PATH
}

function uniq_path()
{
    eval "export PATH=\"$(tr ':' '\n' <<< "$PATH" | sort -r | uniq \
                        | tr '\n' ':' | sed 's/:$//g')\""
}

append_to_path "/bin"
append_to_path "/sbin"
append_to_path "/usr/bin"
append_to_path "/usr/sbin"
append_to_path "/usr/local/bin"
append_to_path "/usr/local/sbin"
append_to_path "/usr/libexec"
if [ "$OS_TYPE" = "osx" ]
then
    append_to_path "$WOLFWZR_HOME/.local/bin"
else
    append_to_path "/opt/cross-mips32/bin"
fi
#uniq_path

export HISTTIMEFORMAT="[%m-%d %R] "

if [ "$OS_TYPE" = "linux" -a "$CPU_TYPE" = "Atom" ]
then
    w | grep " w$" | awk '{print $3}' | grep -s -q ":"
    [ $? -ne 0 ] && export LC_ALL=zh_CN.utf8
fi
############################################################
# COMMAND PROMPT
############################################################
function wolf_update_ps1()
{
    local exit_code=$?
    local last_cmd_exit_code
    local time
    local username
    local work_dir
    local prefix
    local suffix

    if [ $exit_code -ne 0 ]
    then
        # reverse on error ✘
        #last_cmd_exit_code="\[\033[35;7m\]${exit_code}✘"

        # warnning in PS1 head
        last_cmd_exit_code="\[\033[35;40m\]${exit_code}✘\[\033[0m\]"
    fi

    if [ "$TERMINAL_PROFILE" = "Light" ]
    then
        prefix="\[\033[47;37m\]"
    else
        prefix="\[\033[40;37m\]"
    fi
    prefix="$prefix\[\033[37m\]["

    time="\[\033[37m\]\t"
    if [ "$UID" = '0' ]
    then
        username="\[\033[35m\]\u"
    else
        username="\[\033[38m\]\u"
    fi
    work_dir="\[\033[33m\]\W"
    suffix="\[\033[37m\]]\[\033[0m\] "

    export PS1="$last_cmd_exit_code$prefix$time $username $work_dir$suffix"
}
export PROMPT_COMMAND="wolf_update_ps1"
#export PROMPT_DIRTRIM=

############################################################
# BASH COMPLETION
############################################################
if [ "$OS_TYPE" = "linux" -a "$CPU_TYPE" = "Atom" ]
then
    if [ -f "$(brew --prefix)/etc/bash_completion" ]
    then
        . "$(brew --prefix)/etc/bash_completion"
    fi
fi

############################################################
# ALIAS
############################################################
alias a='./a.out'
alias b='bochs -f bochsrc'
alias c='clear'
alias d='du -sh'
alias h='history | less +G --'
alias t='top'
alias j='jobs -l'
alias grep='grep --color=auto'
alias tree='tree -C'
alias pgrep='pgrep -lf'
alias pg='pgrep'
alias hgrep='history | grep -i'
alias mkdir='mkdir -p'

if type colordiff 1>/dev/null 2>/dev/null
then
    alias diff='colordiff'
fi

if [ "$OS_TYPE" = "osx" ] 
then
    alias r='netstat -f inet -nr'
    alias ls='ls -G'
    alias ll='ls -Glh'
    alias la='ls -GlhA'
    alias top='top -o cpu'
    alias t='htop'
    alias um='diskutil umount'
    alias briss="java -jar $WOLFWZR_HOME/.local/share/briss-0.9/briss-0.9.jar"
    alias cpwd='printf "$PWD" | pbcopy'
    alias df='df -Ph'
    alias ds='d * | sort -g'
    alias pg='ps aux | grep -i'
    alias sdcv='sdcv --color --utf8-input --utf8-output'
    alias srh='brew search'
    alias ist='brew install'
else
    alias r='route -n'
    alias ls='ls --color=auto'
    alias ll='ls --color=auto -lh'
    alias la='ls --color=auto -lhA'
    alias briss='java -jar /usr/local/briss/briss-0.9/briss-0.9.jar'
    alias cpwd='printf "$PWD" | xclip -selection clipboard'
    alias open='xdg-open'
    alias m='mplayer -zoom'
    alias mkd='Markdown.pl --html4tags'
    alias wz='/usr/local/bin/WizNote'
    alias df='df -PTh'
    alias ds='d * | sort -h'
    alias office='/usr/lib/libreoffice/program/soffice'
    alias sdcv='sdcv --utf8-input --utf8-output'
    if [ -n "$(which zypper 2>/dev/null)" ]
    then
        alias srh='zypper search -d'
        alias ist='sudo zypper install'
    elif [ -n "$(which yum 2>/dev/null)" ]
    then
        alias srh='yum search'
        alias ist='sudo yum install'
    elif [ -n "$(which apt-get 2>/dev/null)" ]
    then
        alias srh='apt-cache search'
        alias ist='sudo apt-get install'
    fi
fi
alias o='open'
alias lb='lsblk'
alias ..='cd ..'
alias ...='cd ../..'
alias .4='cd ../../..'
alias .5='cd ../../../..'
alias .6='cd ../../../../..'
alias .7='cd ../../../../../..'
alias iconvcat='iconv -f gbk -t utf8'
alias man_cn='LANG=zh_CN.utf8 man'
alias info='info --vi-keys'
alias wget='wget -c -L'
alias gpu='lspci | grep -i "vga\|3d\|2d"'
alias p8='ping 8.8.8.8'

alias o='open'
alias g='grep'
alias f='find . -iname'

alias s='source /etc/wolfwzr.bashrc'

# ${var/pattern/string}
# is pattern begin with /, all matchs of pattern are replaced with string
alias path='echo -e ${PATH//:/\\n}'

# list all tcp/udp ports
#   -t : tcp
#   -u : udp
#   -l : listening
#   -a : show all
#   -n : show numberic
#   -p : show process name
alias ports='netstat -tulanp'

# alias for vi
# environment variable for vim script - vim-colorselector
export DOTVIM="$WOLFWZR_HOME/.vim/bundle/vim-colorschemes"
# variable for cscope
export CSCOPE_EDITOR=vim

if [ -n "$DISPLAY" ]
then
    if which gvim 2>&1 >/dev/null; then alias vi='gvim'; fi
else
    if which vim 2>&1 >/dev/null; then alias vi='vim'; fi
fi

alias vibashrc='vi /etc/wolfwzr.bashrc'
alias virc="vi $WOLFWZR_HOME/.vim/vimrc"
alias visshconf='vi ~wolfwzr/.ssh/config'
alias vihosts='vi /etc/hosts'
if [ "$OS_TYPE" = "osx" ]
then
    alias vismbconf='vi /usr/local/etc/smb.conf'
    alias vikbconf='vi "/Users/wolfwzr/Library/Application Support/Karabiner/private.xml"'
else
    alias vismbconf='vi /etc/samba/smb.conf'
    alias vikbconf='vi ~wolfwzr/.Xmodmap'
fi

############################################################
# z - a better cd
############################################################
if [ "$OS_TYPE" = "osx" ]
then
    source /usr/local/etc/profile.d/z.sh
fi

############################################################
# DIR SHORTCUT
############################################################
if [ "$OS_TYPE" = "osx" ]
then
    # Github
    _gh="/Users/wolfwzr/Documents/git/github/wolfwzr"
    alias ggh='cd "$_gh"'

    # os develop
    _os="$_gh/kernel_learning/real_mode_2_protected_mode"
    alias gos='cd "$_os"'

    # etc in github
    _etc="$_gh/etc/etc"
    alias getc='cd "$_etc"'

    # BrewHome
    _bh="/usr/local/Cellar/"
    alias gbh='cd "$_bh"'

    # HomeBin(~/.local/bin)
    _hb="/Users/wolfwzr/.local/bin"
    alias ghb='cd "$_hb"'

    # MountFolder
    _mf="/Volumes/"
    alias gmf='cd "$_mf"'

    # SAE (Sina App Engine)
    _sae='/Users/wolfwzr/Documents/svn/sae/mail4wolfwzr/mail4wolfwzr/1'
    alias gsae='cd $_sae'
else
    # scn/hse/plug
    _scn='/home/wolfwzr/Documents/work/scanner'
    alias gscn='cd $_scn'

    _hse="$_scn/svn/scanner/user/modules/hse"
    alias ghse='cd $_hse'
    alias hse='(cd $_hse && vi hse-scanner-3.0.2/hsed/hsed.c)'

    _sm="$_scn/svn/scanner/user/modules/scanner/bin/scanner_main/"
    alias gsm='cd $_sm'
    alias sm='(cd $_sm && vi scanner_main.c)'

    _plg="$_scn/svn/signature/tr/sig/plugins"
    alias gplg='cd $_plg'

    # github
    _gh="/home/wolfwzr/Documents/myprojects/github"
    alias ggh='cd "$_gh"'

    # etc in github
    _etc="/home/wolfwzr/usr/etc/etc_in_github/etc"
    alias getc='cd "$_etc"'

    # os develop
    _os="$_gh/kernel_learning/real_mode_2_protected_mode"
    alias gos='cd "$_os"'

    # sae
    _sae='/home/wolfwzr/Documents/myprojects/sae/mail4wolfwzr/mail4wolfwzr/1'
    alias gsae='cd $_sae'
fi

############################################################
# Service control
############################################################
function wolf_service_control()
{
    # function parameter
    #   $1 - service name (eg. smb|ssh|http)
    #   $2 - action (eg. start|stop|restart|status)

    local service_name=$1
    local action=$2
    local service_script=""

    if [ "$OS_TYPE" == "linux" ]
    then
        service_script="/etc/init.d/${service_name}"
    elif [ "$OS_TYPE" == "osx" ]
    then
        service_script="/System/Library/LaunchDaemons/${service_name}.plist"
    else
        echo "Unknown System: $(uname -a)"
        return 1
    fi

    [ -z "$service_name" ] && echo "please specific a service name" && return 2
    if [ ! -e "$service_script" ]
    then
        echo "$service_script: no such service"
        return 3
    fi

    if [ "$OS_TYPE" == "linux" ]
    then
        case "$action" in
            "status")
                sudo $service_script status
                ;;
            "start")
                sudo $service_script start
                ;;
            "stop")
                sudo $service_script stop
                ;;
            "restart")
                sudo $service_script stop
                sudo $service_script start
                ;;
            *)
                echo "$action: Invalid action, use [status|start|stop|restart]"
                ;;
        esac
    elif [ "$OS_TYPE" == "osx" ]
    then
        case "$action" in
            "status")
                sudo -s launchctl list | grep "$service_name"
                ;;
            "start")
                sudo -s launchctl load -w $service_script
                ;;
            "stop")
                sudo -s launchctl unload -w $service_script
                ;;
            "restart")
                sudo -s launchctl unload -w $service_script
                sudo -s launchctl load -w $service_script
                ;;
            *)
                echo "$action: Invalid action, use [status|start|stop|restart]"
                ;;
        esac
    fi
}

function wstatus()
{
    wolf_service_control "$1" status
}

function wstart()
{
    wolf_service_control "$1" start
}

function wstop()
{
    wolf_service_control "$1" stop
}

function wrestart()
{
    wolf_service_control "$1" restart
}

get_website_favicon()
{
    local host=$1
    local h=$(echo $host | awk -F '.' '{print $1}')
    if [ -n "$host" -a -n "$h" ]
    then
        wget "http://$host/favicon.ico" -O "$h.ico"
    fi
}

############################################################
# MISCS
############################################################
if [ "$OS_TYPE" = "linux" ]
then
    export MANPAGER="most -s"
    if [ "$DESKTOP_SESSION" = "xfce4" ]
    then
        resize -s 30 100 > /dev/null
    fi
fi

# vim: set ft=sh:
